# Upstream блоки - это группы серверов для балансировки нагрузки
upstream backend_upstream {
    # Настройка группы backend серверов
    # Nginx будет распределять запросы между этими двумя серверами

    # max_fails=2 - после 2 неудачных попыток сервер помечается как недоступный
    # fail_timeout=20s - сервер остается недоступным 20 секунд, затем Nginx снова пробует его использовать
    # Неудачная попытка = HTTP ошибки 5xx, 4xx, timeout или отказ соединения
    server nginx-backend1:80;   # Первый backend сервер на порту 80
    server nginx-backend2:80;   # Второй backend сервер на порту 80
    # По умолчанию используется round-robin балансировка (по очереди)
    # Пассивная проверка здоровья (passive health check) - Nginx проверяет состояние
}

upstream frontend_upstream {
    # Настройка группы frontend серверов
    # В данном случае только один сервер (без параметров отказоустойчивости)
    server frontend:80;
}

# Основоной блок сервера
server {
    listen 80;      # Nginx слушает на 80 порту
    server_name _;  # Принимаются запросы с любым доменным именем

    # Основоной location блок - обрабатывает все запросы к корню
    location / {
        # Перенаправляет все запросы к frontend серверам
        proxy_pass http://frontend_upstream;
        # Использует HTTP версию 1.1 для соединения с upstream
        proxy_http_version 1.1;
    }

    # Проксируем API-запросы к backend
    location /api/ {
        # Все запросы начинающиеся с /api/ идут к backend серверам
        # Используем чистые пути (trailing slash) для удаления префикса /api/
        proxy_pass http://backend_upstream/;
        proxy_http_version 1.1;

        # Передача важных заголовков от клиента к backend серверам
        proxy_set_header Host $host;                                    # Оргинальный Host заголовок
        proxy_set_header X-Real-IP $remote_addr;                        # Реальный IP клиент
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;    # Цепочка IP адресов
        proxy_set_header X-Forwarded-Proto $scheme;                     # Протокол (http/https)
    }

    # Проксируем health-check запросы к backend
    location /health {
        # Запросы к /health идут к backend серверам для проверки состояния
        # Используем чистые пути (trailing slash) для удаления префикса /health
        proxy_pass http://backend_upstream/;
        proxy_http_version 1.1;

        # Передача важных заголовков от клиента к backend серверам
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }
}
