<?php

require __DIR__ . '/../vendor/autoload.php';

use App\Validator\BracketValidator;

// –¢–µ—Å—Ç–æ–≤—ã–µ —Å–ª—É—á–∞–∏
$testCases = [
    // –í–∞–ª–∏–¥–Ω—ã–µ —Å–∫–æ–±–æ—á–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏
    ['()' => true],
    ['(())' => true],
    ['()()' => true],
    ['(())()(())' => true],

    // –ù–µ–≤–∞–ª–∏–¥–Ω—ã–µ —Å–∫–æ–±–æ—á–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏
    ['(' => false],
    [')' => false],
    [')(' => false],
    ['(a)' => false],
    ['((())' => false],
];

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
$passed = 0;
$failed = 0;

echo "–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –¥–ª—è –∫–ª–∞—Å—Å–∞ BracketValidator...\n\n";

foreach ($testCases as $testCase) {
    foreach ($testCase as $input => $expected) {
        echo "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–≤–æ–¥–∞: '$input'\n";
        echo "–û–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: " . ($expected ? 'true' : 'false') . "\n";

        try {
            $result = BracketValidator::validate($input);
            echo "–§–∞–∫—Ç–∏—á–µ—Å–∫–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: " . ($result ? 'true' : 'false') . "\n";

            if ($result === $expected) {
                echo "‚úÖ –¢–µ—Å—Ç –ü–†–û–ô–î–ï–ù\n";
                $passed++;
            } else {
                echo "‚ùå –¢–µ—Å—Ç –ù–ï –ü–†–û–ô–î–ï–ù\n";
                $failed++;
            }
        } catch (\Exception $e) {
            echo "–ò—Å–∫–ª—é—á–µ–Ω–∏–µ: " . $e->getMessage() . "\n";
            if ($input === '' && $e instanceof \InvalidArgumentException) {
                echo "‚úÖ –¢–µ—Å—Ç –ü–†–û–ô–î–ï–ù (–û–∂–∏–¥–∞–µ–º–æ–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –¥–ª—è –ø—É—Å—Ç–æ–≥–æ –≤–≤–æ–¥–∞)\n";
                $passed++;
            } else {
                echo "‚ùå –¢–µ—Å—Ç –ù–ï –ü–†–û–ô–î–ï–ù (–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–æ–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ)\n";
                $failed++;
            }
        }

        echo "\n";
    }
}

// –¢–µ—Å—Ç –ø—É—Å—Ç–æ–≥–æ –≤–≤–æ–¥–∞
echo "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—É—Å—Ç–æ–≥–æ –≤–≤–æ–¥–∞\n";
echo "–û–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: –ò—Å–∫–ª—é—á–µ–Ω–∏–µ —Å —Å–æ–æ–±—â–µ–Ω–∏–µ–º 'Empty input.'\n";

try {
    BracketValidator::validate('');
    echo "‚ùå –¢–µ—Å—Ç –ù–ï –ü–†–û–ô–î–ï–ù (–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –Ω–µ –≤—ã–±—Ä–æ—à–µ–Ω–æ)\n";
    $failed++;
} catch (\InvalidArgumentException $e) {
    echo "–ò—Å–∫–ª—é—á–µ–Ω–∏–µ: " . $e->getMessage() . "\n";
    if ($e->getMessage() === 'Empty input.') {
        echo "‚úÖ –¢–µ—Å—Ç –ü–†–û–ô–î–ï–ù (–û–∂–∏–¥–∞–µ–º–æ–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –¥–ª—è –ø—É—Å—Ç–æ–≥–æ –≤–≤–æ–¥–∞)\n";
        $passed++;
    } else {
        echo "‚ùå –¢–µ—Å—Ç –ù–ï –ü–†–û–ô–î–ï–ù (–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏—Å–∫–ª—é—á–µ–Ω–∏—è)\n";
        $failed++;
    }
} catch (\Exception $e) {
    echo "–ò—Å–∫–ª—é—á–µ–Ω–∏–µ: " . $e->getMessage() . "\n";
    echo "‚ùå –¢–µ—Å—Ç –ù–ï –ü–†–û–ô–î–ï–ù (–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ç–∏–ø –∏—Å–∫–ª—é—á–µ–Ω–∏—è)\n";
    $failed++;
}

echo "\n";
echo "–ò—Ç–æ–≥–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:\n";
echo "‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ: $passed\n";
echo "‚ùå –ù–µ –ø—Ä–æ–π–¥–µ–Ω–æ: $failed\n";
echo "–í—Å–µ–≥–æ: " . ($passed + $failed) . "\n";

if ($failed === 0) {
    echo "\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã!\n";
    exit(0);
} else {
    echo "\n‚ùå –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ–π–¥–µ–Ω—ã.\n";
    exit(1);
}
